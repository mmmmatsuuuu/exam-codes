# =================================================================
# tate   : 縦線の本数を表す変数
# yoko   : 横線の本数を表す変数
# Yokosen: 横線の位置の情報を表す整数の配列
#          例) Yokosen[y] = x <=> 上からy番目の横線が左からx番目の縦線と
#              x+1番目の縦線を結ぶことを意味する。
# Koma   : コマの番号を順番に格納した配列
# 
# 配列の番号は１から始まっているのでどの配列も最初の要素は捨て要素になっている。
# =================================================================
tate    = 3
yoko    = 4
Yokosen = ["捨て要素", 2, 1, 2, 1]
Koma    = ["捨て要素", 1, 2, 3]

# =================================================================
# 図６　関数：配列を表示する
# 引数　: arr: 配列
# 返り値: なし
# =================================================================
def print_array(arr):
    for j in range(1, len(arr), 1):
        print("{} ".format(arr[j]), end="") # あみだくじが全角のため半角空白を入れている
        
    print("")  # 改行

# =================================================================
# 図７　関数：あみだくじを表示する
# 引数　: tate: 縦線の本数, yoko: 横線の本数, Yokosen: 配列
# 返り値: なし
# =================================================================
def print_amidakuji(tate, yoko, Yokosen):
    for y in range(1, yoko+1, 1):
        x = 1
        while x <= tate:
            if Yokosen[y] == x:
                print("┣", end="")
                print("┫", end="")
                x = x + 2
            else:
                print("┃", end="")
                x = x + 1
        
        print("")  # 改行

# =================================================================
# 図５
# =================================================================
print_array(Koma)
print_amidakuji(len(Koma), yoko, Yokosen)

for y in range(1, len(Yokosen), 1):
    t = Koma[Yokosen[y]]
    Koma[Yokosen[y]] = Koma[Yokosen[y]+1]
    Koma[Yokosen[y]+1] = t
    
print_array(Koma)